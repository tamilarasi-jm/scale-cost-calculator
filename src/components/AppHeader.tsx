import { Calculator, Moon, Sun, Download, Save, History, HelpCircle, ArrowLeft, Network, DollarSign, BarChart3, GitCompare } from "lucide-react";
import { Link, useLocation } from "react-router-dom";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { useToast } from "@/hooks/use-toast";
import jsPDF from "jspdf";
import autoTable from "jspdf-autotable";

interface EstimationResult {
  name: string;
  cost: number;
  effort: number;
  duration: number;
  risk: string;
}

interface AppHeaderProps {
  darkMode: boolean;
  onToggleDarkMode: () => void;
  onBackToHome?: () => void;
  results?: EstimationResult[];
  projectParams?: {
    size: number;
    teamSize: number;
    timeline: number;
    complexity: string;
    currency: 'USD' | 'INR';
  };
}

export const AppHeader = ({ darkMode, onToggleDarkMode, onBackToHome, results, projectParams }: AppHeaderProps) => {
  const { toast } = useToast();
  const location = useLocation();

  const handleSave = () => {
    toast({
      title: "Project Saved",
      description: "Your estimation has been saved to browser storage.",
    });
  };

  const handleExportPDF = () => {
    if (!results || results.length === 0) {
      toast({
        title: "No Data Available",
        description: "Please calculate estimates first before exporting.",
        variant: "destructive",
      });
      return;
    }

    try {
      const doc = new jsPDF();
      
      // Header
      doc.setFontSize(20);
      doc.setTextColor(37, 99, 235); // Primary blue
      doc.text("Software Cost Estimation Report", 14, 20);
      
      // Date
      doc.setFontSize(10);
      doc.setTextColor(100, 116, 139);
      doc.text(`Generated: ${new Date().toLocaleDateString()}`, 14, 28);
      
      // Project Parameters Section
      if (projectParams) {
        doc.setFontSize(14);
        doc.setTextColor(30, 41, 59);
        doc.text("Project Parameters", 14, 40);
        
        doc.setFontSize(10);
        doc.setTextColor(71, 85, 105);
        doc.text(`Project Size: ${projectParams.size} KLOC`, 14, 48);
        doc.text(`Team Size: ${projectParams.teamSize} people`, 14, 54);
        doc.text(`Timeline: ${projectParams.timeline} months`, 14, 60);
        doc.text(`Complexity: ${projectParams.complexity}`, 14, 66);
        doc.text(`Currency: ${projectParams.currency}`, 14, 72);
      }
      
      // Estimation Results Table
      doc.setFontSize(14);
      doc.setTextColor(30, 41, 59);
      doc.text("Estimation Results", 14, 85);
      
      const currencySymbol = projectParams?.currency === 'INR' ? '₹' : '$';
      
      autoTable(doc, {
        startY: 90,
        head: [['Model', 'Cost', 'Effort (PM)', 'Duration (mo)', 'Risk']],
        body: results.map(result => [
          result.name,
          `${currencySymbol}${result.cost.toLocaleString()}`,
          result.effort.toFixed(1),
          result.duration.toFixed(1),
          result.risk.toUpperCase()
        ]),
        theme: 'striped',
        headStyles: {
          fillColor: [37, 99, 235],
          textColor: 255,
          fontStyle: 'bold',
        },
        styles: {
          fontSize: 10,
          cellPadding: 5,
        },
        alternateRowStyles: {
          fillColor: [248, 250, 252],
        },
      });
      
      // Recommendations
      const recommended = results.reduce((prev, current) => 
        prev.cost < current.cost ? prev : current
      );
      
      const finalY = (doc as any).lastAutoTable.finalY || 120;
      doc.setFontSize(14);
      doc.setTextColor(30, 41, 59);
      doc.text("Recommendation", 14, finalY + 15);
      
      doc.setFontSize(10);
      doc.setTextColor(16, 185, 129);
      doc.text(`✓ ${recommended.name} offers the best cost estimate at ${currencySymbol}${recommended.cost.toLocaleString()}`, 14, finalY + 23);
      
      // Footer
      doc.setFontSize(8);
      doc.setTextColor(148, 163, 184);
      doc.text("Generated by Cost Estimator Pro", 14, doc.internal.pageSize.height - 10);
      
      // Save the PDF
      doc.save(`cost-estimation-${Date.now()}.pdf`);
      
      toast({
        title: "PDF Exported",
        description: "Your report has been downloaded successfully.",
      });
    } catch (error) {
      toast({
        title: "Export Failed",
        description: "There was an error generating the PDF.",
        variant: "destructive",
      });
      console.error("PDF Export Error:", error);
    }
  };

  const handleExportExcel = () => {
    toast({
      title: "Exporting to Excel",
      description: "Your spreadsheet is being generated...",
    });
  };

  return (
    <header className="border-b border-border bg-card/95 backdrop-blur supports-[backdrop-filter]:bg-card/60 sticky top-0 z-10">
      <div className="flex items-center justify-between px-6 py-4">
        <div className="flex items-center gap-4">
          {onBackToHome && (
            <Button 
              variant="ghost" 
              size="sm"
              onClick={onBackToHome}
              className="gap-2"
            >
              <ArrowLeft className="h-4 w-4" />
              <span className="hidden sm:inline">Back to Home</span>
            </Button>
          )}
          <div className="flex items-center gap-2 font-bold text-lg">
            <Calculator className="w-6 h-6 text-primary" />
            <span className="gradient-text">Cost Estimator Pro</span>
          </div>
        </div>

        <nav className="hidden md:flex items-center gap-1">
          <Button
            variant={location.pathname === '/' ? 'default' : 'ghost'}
            size="sm"
            asChild
          >
            <Link to="/">Dashboard</Link>
          </Button>
          <Button
            variant={location.pathname === '/pert-visualization' ? 'default' : 'ghost'}
            size="sm"
            asChild
          >
            <Link to="/pert-visualization" className="flex items-center gap-2">
              <Network className="w-4 h-4" />
              PERT
            </Link>
          </Button>
          <Button
            variant={location.pathname === '/evm-calculator' ? 'default' : 'ghost'}
            size="sm"
            asChild
          >
            <Link to="/evm-calculator" className="flex items-center gap-2">
              <DollarSign className="w-4 h-4" />
              EVM Calculator
            </Link>
          </Button>
          <Button
            variant={location.pathname === '/kpi-dashboard' ? 'default' : 'ghost'}
            size="sm"
            asChild
          >
            <Link to="/kpi-dashboard" className="flex items-center gap-2">
              <BarChart3 className="w-4 h-4" />
              KPI Dashboard
            </Link>
          </Button>
          <Button
            variant={location.pathname === '/diagram-comparison' ? 'default' : 'ghost'}
            size="sm"
            asChild
          >
            <Link to="/diagram-comparison" className="flex items-center gap-2">
              <GitCompare className="w-4 h-4" />
              AOA vs AON
            </Link>
          </Button>
        </nav>

        <div className="flex items-center gap-2">
          <Button
            variant="ghost"
            size="icon"
            onClick={onToggleDarkMode}
            title="Toggle dark mode"
          >
            {darkMode ? <Sun className="w-5 h-5" /> : <Moon className="w-5 h-5" />}
          </Button>

          <Button
            variant="outline"
            size="sm"
            onClick={handleSave}
            className="hidden sm:flex"
          >
            <Save className="w-4 h-4 mr-2" />
            Save
          </Button>

          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="default" size="sm">
                <Download className="w-4 h-4 mr-2" />
                Export
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end" className="w-48">
              <DropdownMenuItem onClick={handleExportPDF}>
                <Download className="w-4 h-4 mr-2" />
                Export to PDF
              </DropdownMenuItem>
              <DropdownMenuItem onClick={handleExportExcel}>
                <Download className="w-4 h-4 mr-2" />
                Export to Excel
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>

          <Button
            variant="ghost"
            size="icon"
            title="View history"
            className="hidden md:flex"
          >
            <History className="w-5 h-5" />
          </Button>

          <Button
            variant="ghost"
            size="icon"
            title="Help"
          >
            <HelpCircle className="w-5 h-5" />
          </Button>
        </div>
      </div>
    </header>
  );
};
